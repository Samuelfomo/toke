import { config } from 'dotenv';

import Db from '../src/license/database/db.config';
import { TableInitializer } from '../src/license/database/db.initializer';
import BaseModel from '../src/license/database/db.base';

config();

/**
 * Classe de test pour tester la g√©n√©ration de tokens
 */
class TokenTester extends BaseModel {
  constructor() {
    super();
  }

  /**
   * Test public des m√©thodes de g√©n√©ration
   */
  async testAllGenerators(): Promise<void> {
    console.log('üß™ === TEST DES G√âN√âRATEURS DE TOKENS ===\n');

    const tableName = 'xf_client'; // Table existante

    try {
      // Test 1: GUID Generator
      console.log('1Ô∏è‚É£ Test GUID Generator...');
      const guid = await this.guidGenerator(tableName, 6);
      console.log(`R√©sultat GUID: ${guid}\n`);

      // Test 2: Time-based Token Generator
      console.log('2Ô∏è‚É£ Test Time-based Token Generator...');
      const timeToken = await this.timeBasedTokenGenerator(tableName, 3, '-', 'TEST');
      console.log(`R√©sultat Time Token: ${timeToken}\n`);

      // Test 3: UUID Token Generator
      console.log('3Ô∏è‚É£ Test UUID Token Generator...');
      const uuidToken = await this.uuidTokenGenerator(tableName);
      console.log(`R√©sultat UUID Token: ${uuidToken}\n`);
    } catch (error: any) {
      console.error('‚ùå Erreur pendant les tests:', error.message);
      console.error('Stack:', error.stack);
    }
  }

  /**
   * Test de TableInitializer
   */
  async testTableInitializer(): Promise<void> {
    console.log('üèóÔ∏è === DIAGNOSTIC TABLE INITIALIZER ===\n');

    console.log('TableInitializer.isInitialized():', TableInitializer.isInitialized());

    if (TableInitializer.isInitialized()) {
      console.log('Stats:', TableInitializer.getStats());

      try {
        const model = TableInitializer.getModel('xf_client');
        console.log('Mod√®le xf_client trouv√©:', !!model);
        if (model) {
          console.log('Nom du mod√®le:', model.name);
          console.log('Table:', model.tableName);
        }
      } catch (error: any) {
        console.error('‚ùå Erreur acc√®s mod√®le:', error.message);
      }
    }
    console.log('');
  }
}

/**
 * Fonction principale de test
 */
async function runTests(): Promise<void> {
  console.log('üöÄ D√©marrage des tests de g√©n√©ration de tokens...\n');

  try {
    // 1. Initialiser la DB
    console.log('üì¶ Initialisation base de donn√©es...');
    const sequelize = await Db.getInstance();
    console.log('‚úÖ DB connect√©e\n');

    // 2. Initialiser les tables
    console.log('üóÑÔ∏è Initialisation des tables...');
    await TableInitializer.initialize(sequelize);
    console.log('‚úÖ Tables initialis√©es\n');

    // 3. Cr√©er le testeur
    const tester = new TokenTester();

    // 4. Diagnostics (plus besoin d'init car on utilise Db.getInstance() directement)
    await tester.testTableInitializer();

    // 5. Tests des g√©n√©rateurs
    await tester.testAllGenerators();

    console.log('üéâ Tests termin√©s avec succ√®s !');
  } catch (error: any) {
    console.error('üí• Erreur fatale dans les tests:', error.message);
    console.error('Stack compl√®te:', error.stack);
  } finally {
    // Nettoyage
    await Db.close();
    console.log('üîå Connexion ferm√©e');
  }
}

// Lancer les tests si ce fichier est ex√©cut√© directement
// if (require.main === module) {
runTests()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error('üíÄ Tests √©chou√©s:', error);
    process.exit(1);
  });
// }

export default TokenTester;
